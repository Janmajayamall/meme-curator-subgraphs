type GroupFactory @entity {
	id: ID!
	groupCount: BigInt!
	groups: [Group!]! @derivedFrom(field: "groupFactory")
}

type Group @entity {
	id: ID!

	groupFactory: GroupFactory!

	# config
	fee: BigDecimal!
	donBuffer: BigInt!
	resolutionBuffer: BigInt!
	isActive: Boolean!

	donReservesLimit: BigDecimal!
	collateralToken: Bytes!
	manager: Bytes!

	markets: [Market!]! @derivedFrom(field: "group")
}

type Market @entity {
	id: ID!

	group: Group!
	marketIdentifier: Bytes!

	# reserves
	reserve0: BigDecimal!
	reserve1: BigDecimal!

	# state
	donBufferEndsAt: BigInt!
	donBuffer: BigInt!
	resolutionBufferEndsAt: BigInt!
	resolutionBuffer: BigInt!

	# staked info
	staker0: Bytes!
	staker1: Bytes!
	lastAmountStaked: BigDecimal!

	# details
	tokenC: Bytes!
	fee: BigDecimal!
	outcome: BigInt!

	# extras
	donEscalationCount: BigInt!

	stakes: [UserStake!]! @derivedFrom(field: "market")
	users: [UserMarket!]! @derivedFrom(field: "market")
	positions: [UserPosition!]! @derivedFrom(field: "market")
}

type User @entity {
	id: ID!
	markets: [UserMarket!]! @derivedFrom(field: "user")
	stakes: [UserStake!]! @derivedFrom(field: "user")
	positions: [UserPosition!]! @derivedFrom(field: "user")
}

type UserMarket @entity {
	id: ID! # {user}-{market}
	user: User!
	market: Market!
}

type UserPosition @entity {
	id: ID! # {user}-{marketIdentifier}-{group}
	user: User!
	market: Market!
	group: Group!

	stakeId0: Bytes!
	stakeId1: Bytes!

	amount0: BigDecimal!
	amount1: BigDecimal!
}

type UserStake @entity {
	id: ID! # {user}-{marketIdentifier}-{group}-{donEscalationIndex}
	user: User!
	market: Market!
	group: Group!

	donEscalationIndex: BigInt!

	amount: BigDecimal!
	outcome: BigInt!
}
